#!/bin/bash

# Exit on unset variable.
set -u

print_help() {
    cat << EOF
Usage: ${0##*/} [-hq]
Collect debug logs.

    -h Display this help and exit.
    -q Run in silent mode without prompting user for inputs.
EOF
}

#######################################
# Prints a string if not in silent mode.
# Globals:
#   FLAG_SILENT_MODE
# Arguments:
#   printf arguments
# Outputs:
#   Writes a formatted string to stdout.
#######################################
print_info() {
  if [ "$FLAG_SILENT_MODE" != "true" ]; then
    printf "$@"
  fi
}

FLAG_SILENT_MODE=false

# Parse command-line arguments.
while getopts "hq" opt; do
    case $opt in
        h)
            print_help
            exit
            ;;
        q)
            FLAG_SILENT_MODE=true
            ;;
        *)
            print_help >&2
            exit 1
        # Add more options in the future.
    esac
done

LOG_FILE=$(mktemp)
print_info "Writing diagnostic logs to $LOG_FILE\n"

echo "TinyPilot log dump" >> "$LOG_FILE"
echo "https://tinypilotkvm.com" >> "$LOG_FILE"
printf "Timestamp: %s" "$(date --iso-8601=seconds)" >> "$LOG_FILE"
printf "\n\n" >> "$LOG_FILE"

echo "Software versions" >> "$LOG_FILE"

print_info "Checking TinyPilot version...\n"
cd /opt/tinypilot
printf "TinyPilot version: %s %s\n" "$(git describe --tags --always)" "$(git rev-parse --short HEAD)" >> "$LOG_FILE"

print_info "Checking uStreamer version...\n"
cd /opt/ustreamer
printf "uStreamer version: %s %s\n" "$(git describe --tags --always)" "$(git rev-parse --short HEAD)" >> "$LOG_FILE"

print_info "Checking OS version...\n"
printf "OS version: %s\n" "$(uname -a)" >> "$LOG_FILE"
printf "\n" >> "$LOG_FILE"

print_info "Checking for voltage issues...\n"
echo "voltage logs" >> "$LOG_FILE"
sudo journalctl -xe | grep -i "voltage"  >> "$LOG_FILE"
printf "\n" >> "$LOG_FILE"

print_info "Checking TinyPilot configuration...\n"
printf "TinyPilot configuration\n" >> "$LOG_FILE"
cat /lib/systemd/system/tinypilot.service >> "$LOG_FILE"
printf "\n" >> "$LOG_FILE"

print_info "Checking TinyPilot logs...\n"
printf "TinyPilot logs\n" >> "$LOG_FILE"
sudo journalctl -u tinypilot | tail -n 200 >> "$LOG_FILE"
printf "\n" >> "$LOG_FILE"

print_info "Checking TinyPilot updater logs...\n"
printf "TinyPilot update logs\n" >> "$LOG_FILE"
$(dirname $0)/read-update-log | tail -n 200 >> "$LOG_FILE"
printf "\n" >> "$LOG_FILE"

print_info "Checking uStreamer configuration...\n"
printf "uStreamer configuration\n" >> "$LOG_FILE"
cat /lib/systemd/system/ustreamer.service >> "$LOG_FILE"
printf "\n" >> "$LOG_FILE"

print_info "Checking uStreamer logs...\n"
printf "uStreamer logs\n" >> "$LOG_FILE"
sudo journalctl -u ustreamer | tail -n 80 >> "$LOG_FILE"
printf "\n" >> "$LOG_FILE"

print_info "Checking nginx logs...\n"
echo "nginx logs" >> "$LOG_FILE"
sudo journalctl -u nginx >> "$LOG_FILE"
printf "\n\n" >> "$LOG_FILE"
sudo tail -n 100 /var/log/nginx/error.log >> "$LOG_FILE"
printf "\n\n" >> "$LOG_FILE"
sudo tail -n 30 /var/log/nginx/access.log >> "$LOG_FILE"
printf "\n" >> "$LOG_FILE"

print_info "Your log:\n\n"
cat "$LOG_FILE"
print_info "%s\n" "-------------------------------------"
print_info "\n\n"

SHOULD_UPLOAD=false
if [ "$FLAG_SILENT_MODE" != "true" ]; then
    echo -n "Upload your log file? You can review it above to see what information it contains (y/n)? "
    read answer
    printf "\n"
    if [ "$answer" != "${answer#[Yy]}" ]; then
        SHOULD_UPLOAD=true
    fi
fi

if [ "$SHOULD_UPLOAD" == "true" ]; then
    URL=$(cat "$LOG_FILE" | curl --silent --show-error --form 'sprunge=<-' http://sprunge.us)
    printf "Copy the following URL into your bug report:\n\n\t"
    printf "${URL}\n\n"
else
    print_info "Log file not uploaded.\n"
    print_info "If you decide to share it, run:\n\n"
    print_info "  cat $LOG_FILE | curl --silent --show-error --form 'sprunge=<-' http://sprunge.us\n\n"
fi
